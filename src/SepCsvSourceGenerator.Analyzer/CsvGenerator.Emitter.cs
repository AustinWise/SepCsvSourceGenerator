using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace SepCsvSourceGenerator;

public partial class CsvGenerator
{
    internal sealed class Emitter
    {
        public string Emit(IReadOnlyList<Parser.CsvParseTarget> parseTargets, CancellationToken cancellationToken)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("#nullable enable");
            foreach (var target in parseTargets)
            {
                cancellationToken.ThrowIfCancellationRequested();
                EmitParserMethod(sb, target);
            }
            return sb.ToString();
        }

        private void EmitParserMethod(StringBuilder sb, Parser.CsvParseTarget target)
        {
            sb.AppendLine($"namespace {target.Namespace}");
            sb.AppendLine("{");
            sb.AppendLine($"partial class {target.ClassName}");
            sb.AppendLine("{");
            sb.AppendLine($"    public async static partial System.Collections.Generic.IAsyncEnumerable<{target.ClassName}> {target.MethodName}(nietras.SeparatedValues.SepReader reader, [System.Runtime.CompilerServices.EnumeratorCancellation] System.Threading.CancellationToken ct)");
            sb.AppendLine("    {");
            // Emit index variables
            foreach (var prop in target.Properties)
            {
                sb.AppendLine($"        int {ToCamel(prop.Name)}Ndx;");
            }
            sb.AppendLine();
            // Emit header index lookups
            foreach (var prop in target.Properties)
            {
                if (prop.IsRequired)
                {
                    sb.AppendLine($"        if (!reader.Header.TryIndexOf(\"{prop.HeaderName}\", out {ToCamel(prop.Name)}Ndx))");
                    sb.AppendLine($"        {{");
                    sb.AppendLine($"            throw new System.ArgumentException(\"Missing column name '{prop.HeaderName}'\");");
                    sb.AppendLine($"        }}");
                }
                else
                {
                    sb.AppendLine($"        if (!reader.Header.TryIndexOf(\"{prop.HeaderName}\", out {ToCamel(prop.Name)}Ndx))");
                    sb.AppendLine($"        {{");
                    sb.AppendLine($"            {ToCamel(prop.Name)}Ndx = -1;");
                    sb.AppendLine($"        }}");
                }
            }
            sb.AppendLine();
            sb.AppendLine("        await foreach (var row in reader)");
            sb.AppendLine("        {");
            sb.AppendLine("            ct.ThrowIfCancellationRequested();");
            sb.AppendLine($"            var ret = new {target.ClassName}()");
            sb.AppendLine("            {");
            // Emit property assignments
            foreach (var prop in target.Properties)
            {
                string parseExpr = GetParseExpression(prop);
                if (prop.IsRequired)
                {
                    sb.AppendLine($"                {prop.Name} = {parseExpr},");
                }
            }
            sb.AppendLine("            };");
            // Emit optional property assignments
            foreach (var prop in target.Properties)
            {
                if (!prop.IsRequired)
                {
                    string parseExpr = GetParseExpression(prop);
                    sb.AppendLine($"            if ({ToCamel(prop.Name)}Ndx != -1)");
                    sb.AppendLine($"            {{");
                    sb.AppendLine($"                ret.{prop.Name} = {parseExpr};");
                    sb.AppendLine($"            }}");
                }
            }
            sb.AppendLine("            yield return ret;");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            sb.AppendLine("}");
        }

        private string ToCamel(string name) => char.ToLowerInvariant(name[0]) + name.Substring(1);

        private string GetParseExpression(Parser.CsvPropertyInfo prop)
        {
            if (prop.Type == "string")
                return $"row[{ToCamel(prop.Name)}Ndx].Span.ToString()";
            if (prop.Type == "DateTime" && !string.IsNullOrEmpty(prop.DateFormat))
                return $"System.DateTime.ParseExact(row[{ToCamel(prop.Name)}Ndx].Span, \"{prop.DateFormat}\", System.Globalization.CultureInfo.InvariantCulture)";
            if (prop.Type == "DateTime")
                return $"System.DateTime.Parse(row[{ToCamel(prop.Name)}Ndx].Span, System.Globalization.CultureInfo.InvariantCulture)";
            if (prop.Type.EndsWith("?")) // Nullable
            {
                var baseType = prop.Type.TrimEnd('?');
                return $"{baseType}.Parse(row[{ToCamel(prop.Name)}Ndx].Span, System.Globalization.CultureInfo.InvariantCulture)";
            }
            // Default: ISpanParsable
            return $"{prop.Type}.Parse(row[{ToCamel(prop.Name)}Ndx].Span, System.Globalization.CultureInfo.InvariantCulture)";
        }
    }
}
