// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

public partial class MyGlobalRecord
{
    public static partial global::System.Collections.Generic.IEnumerable<global::MyGlobalRecord> ParseRecords(SepReader reader, global::System.Threading.CancellationToken ct)
    {
        int NameNdx;
        int UnrelatedPropertyNdx;

        if (!reader.Header.TryIndexOf("Name", out NameNdx))
        {
            NameNdx = -1;
        }
        if (!reader.Header.TryIndexOf("UnrelatedProperty", out UnrelatedPropertyNdx))
        {
            UnrelatedPropertyNdx = -1;
        }

        foreach (SepReader.Row row in reader)
        {
            ct.ThrowIfCancellationRequested();

            global::MyGlobalRecord ret = new global::MyGlobalRecord()
            {
            };
            if (NameNdx != -1)
            {
                ret.Name = row[NameNdx].Span.ToString();
            }
            if (UnrelatedPropertyNdx != -1)
            {
                ret.UnrelatedProperty = row[UnrelatedPropertyNdx].Span.ToString();
            }
            yield return ret;
        }
    }
}
