// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Test
{
    public partial class MyRecord
    {
        public static async partial global::System.Collections.Generic.IAsyncEnumerable<global::Test.MyRecord> ParseWhatHo(SepReader whatHoReader, [EnumeratorCancellation] global::System.Threading.CancellationToken deucedCancellationToken)
        {
            int NameNdx;

            if (!whatHoReader.Header.TryIndexOf("Name", out NameNdx))
            {
                NameNdx = -1;
            }

            await foreach (SepReader.Row row in whatHoReader
                #if NET10_0_OR_GREATER
                .WithCancellation(deucedCancellationToken).ConfigureAwait(false)
                #endif
            )
            {
                deucedCancellationToken.ThrowIfCancellationRequested();

                global::Test.MyRecord ret = new global::Test.MyRecord()
                {
                };
                if (NameNdx != -1)
                {
                    ret.Name = row[NameNdx].Span.ToString();
                }
                yield return ret;
            }
        }
    }
}
