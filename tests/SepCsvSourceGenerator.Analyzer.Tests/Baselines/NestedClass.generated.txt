// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Test
{
    public partial class OuterClass
    {
        public partial class NestedClass
        {
            public static async partial System.Collections.Generic.IAsyncEnumerable<Test.OuterClass.NestedClass> ParseRecords(nietras.SeparatedValues.SepReader reader, [EnumeratorCancellation] System.Threading.CancellationToken ct)
            {
                int NameNdx;

                if (!reader.Header.TryIndexOf("Name", out NameNdx))
                {
                    NameNdx = -1;
                }

                await foreach (SepReader.Row row in reader
                    #if NET10_0_OR_GREATER
                    .WithCancellation(ct).ConfigureAwait(false)
                    #endif
                )
                {
                    ct.ThrowIfCancellationRequested();

                    global::Test.OuterClass.NestedClass ret = new global::Test.OuterClass.NestedClass()
                    {
                    };
                    if (NameNdx != -1)
                    {
                        ret.Name = row[NameNdx].Span.ToString();
                    }
                    yield return ret;
                }
            }
        }
    }
}
