// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

public partial class MyGlobalRecord
{
    public async static partial global::System.Collections.Generic.IAsyncEnumerable<global::MyGlobalRecord> ParseRecords(SepReader reader, [EnumeratorCancellation] global::System.Threading.CancellationToken ct)
    {
        int NameNdx;

        if (!reader.Header.TryIndexOf("Name", out NameNdx))
        {
            NameNdx = -1;
        }

        await foreach (SepReader.Row row in reader
        #if NET10_0_OR_GREATER
        .WithCancellation(ct).ConfigureAwait(false)
        #endif
        )
        {
            ct.ThrowIfCancellationRequested();

            global::MyGlobalRecord ret = new global::MyGlobalRecord();
            if (NameNdx != -1)
            {
                ret.Name = row[NameNdx].Span.ToString();
            }
            yield return ret;
        }
    }
}
