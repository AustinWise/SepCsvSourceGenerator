// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Test
{
    public partial class MyRecordWithRequired
    {
        public static async partial global::System.Collections.Generic.IAsyncEnumerable<global::Test.MyRecordWithRequired> ParseRecords(SepReader reader, [EnumeratorCancellation] global::System.Threading.CancellationToken ct)
        {
            int NameNdx;

            if (!reader.Header.TryIndexOf("Name", out NameNdx))
            {
                throw new global::System.ArgumentException($"Missing required column 'Name' for required property 'Name'.");
            }

            await foreach (SepReader.Row row in reader
                #if NET10_0_OR_GREATER
                .WithCancellation(ct).ConfigureAwait(false)
                #endif
            )
            {
                ct.ThrowIfCancellationRequested();

                global::Test.MyRecordWithRequired ret = new global::Test.MyRecordWithRequired()
                {
                    Name = row[NameNdx].Span.ToString(),
                };
                yield return ret;
            }
        }
    }
}
