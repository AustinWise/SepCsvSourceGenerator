// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Test
{
    public partial class MyRecordWithRequired
    {
        public async static partial global::System.Collections.Generic.IAsyncEnumerable<MyRecordWithRequired> ParseRecords(SepReader reader, [EnumeratorCancellation] global::System.Threading.CancellationToken ct)
        {
            int NameNdx;

            if (!reader.Header.TryIndexOf("Name", out NameNdx))
            {
                throw new global::System.ArgumentException($"Missing required column 'Name' for required member 'MyRecordWithRequired.Name'.");
            }

            await foreach (SepReader.Row row in reader
            #if NET10_0_OR_GREATER
            .WithCancellation(ct).ConfigureAwait(false)
            #endif
            )
            {
                ct.ThrowIfCancellationRequested();

                MyRecordWithRequired ret = new MyRecordWithRequired()
                {
                    Name = row[NameNdx].Span.ToString()
                };
                yield return ret;
            }
        }
    }
}
