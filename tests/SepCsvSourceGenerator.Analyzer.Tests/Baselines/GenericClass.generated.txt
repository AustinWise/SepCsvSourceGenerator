// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Test
{
    public partial class MyGenericRecord<T>
    {
        public static async partial global::System.Collections.Generic.IAsyncEnumerable<global::Test.MyGenericRecord<T>> ParseRecords(SepReader reader, [EnumeratorCancellation] global::System.Threading.CancellationToken ct)
        {
            int NameNdx;
            int ValueNdx;

            if (!reader.Header.TryIndexOf("Name", out NameNdx))
            {
                NameNdx = -1;
            }
            if (!reader.Header.TryIndexOf("Value", out ValueNdx))
            {
                ValueNdx = -1;
            }

            await foreach (SepReader.Row row in reader
                #if NET10_0_OR_GREATER
                .WithCancellation(ct).ConfigureAwait(false)
                #endif
            )
            {
                ct.ThrowIfCancellationRequested();

                global::Test.MyGenericRecord<T> ret = new global::Test.MyGenericRecord<T>()
                {
                };
                if (NameNdx != -1)
                {
                    ret.Name = row[NameNdx].Span.ToString();
                }
                if (ValueNdx != -1)
                {
                    ret.Value = T.Parse(row[ValueNdx].Span, CultureInfo.InvariantCulture);
                }
                yield return ret;
            }
        }
    }
}
