// <auto-generated/>
#nullable enable
using nietras.SeparatedValues;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Test
{
    public partial class DerivedRecord
    {
        public static async partial global::System.Collections.Generic.IAsyncEnumerable<global::Test.DerivedRecord> ParseRecords(SepReader reader, [EnumeratorCancellation] global::System.Threading.CancellationToken ct)
        {
            int DerivedNameNdx;
            int BaseNameNdx;

            if (!reader.Header.TryIndexOf("DerivedName", out DerivedNameNdx))
            {
                throw new global::System.ArgumentException($"Missing required column 'DerivedName' for required property 'DerivedName'.");
            }
            if (!reader.Header.TryIndexOf("BaseName", out BaseNameNdx))
            {
                throw new global::System.ArgumentException($"Missing required column 'BaseName' for required property 'BaseName'.");
            }

            await foreach (SepReader.Row row in reader
                #if NET10_0_OR_GREATER
                .WithCancellation(ct).ConfigureAwait(false)
                #endif
            )
            {
                ct.ThrowIfCancellationRequested();

                global::Test.DerivedRecord ret = new global::Test.DerivedRecord()
                {
                    DerivedName = row[DerivedNameNdx].Span.ToString(),
                    BaseName = row[BaseNameNdx].Span.ToString()
                };
                yield return ret;
            }
        }
    }
}
